*******Problem Statement******
*******Maximum Width of Binary Tree*******

Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).
Example 2:


Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).
Example 3:


Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).
 

Constraints:

The number of nodes in the tree is in the range [1, 3000].
-100 <= Node.val <= 100

*******Code*******
class Pair{
    TreeNode node;
    int num;

    Pair(TreeNode node_, int num_){
        node = node_;
        this.num = num_;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;

        Queue<Pair> q = new LinkedList<>();
        int maxWidth = 0;

        q.add(new Pair(root, 0));

        while(! q.isEmpty()){
            int size = q.size();
            int minNum = q.peek().num;
            int first = 0, last = 0;

            for(int i = 0; i < size; i++){
                int curr_idx = q.peek().num - minNum;
                TreeNode node = q.peek().node;
                q.remove();

                if(i == 0) first = curr_idx;
                if(i == size - 1) last = curr_idx;

                if(node.left != null){
                    q.add(new Pair(node.left, curr_idx*2+1));
                }

                if(node.right != null){
                    q.add(new Pair(node.right, curr_idx*2+2));
                }
            }

            maxWidth = Math.max(maxWidth, last - first + 1);
        }

        return maxWidth;
    }
}
