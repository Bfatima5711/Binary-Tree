******Problem Statement******
*******Binary Tree Zigzag Level Order Traversal*******

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100


******Code*******

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();

        if(root == null) return result;

        Queue<TreeNode> nodesQ = new LinkedList<>();
        nodesQ.add(root);
        boolean leftToRight = true;

        while(! nodesQ.isEmpty()){
            int size = nodesQ.size();
            List<Integer> row = new ArrayList<>();
            int[] arr = new int[size];

            for(int i = 0; i < size; i++){
                TreeNode node = nodesQ.peek();
                nodesQ.remove();

                int index = leftToRight== true ? i: size - 1 - i;
                
                arr[index] = node.val;

                if(node.left != null){
                    nodesQ.add(node.left);
                }

                if(node.right != null){
                    nodesQ.add(node.right);
                }
            }

            leftToRight = !leftToRight;

            for(int i = 0 ; i < size; i++){
                row.add(arr[i]);
            }

            result.add(row);
        }
        return result;
    }
}