******Problem Statement*******
*****Insert a node in a BST******

Given a BST and a key k. If k is not present in the BST, Insert a new Node with a value equal to k into the BST. If k is already present in the BST, don't modify the BST. Return the root of the modified BST after inserting k. 

Note: The generated output contains the inorder traversal of the modified tree.

Examples :

Input: k = 4
     2
   /   \   
  1     3
Output: 1 2 3 4
Explanation: After inserting the node 4 Inorder traversal will be 1 2 3 4.
Input: k = 4
        2
      /   \
     1     3
             \
              6
Output: 1 2 3 4 6
Explanation: After inserting the node 4 Inorder traversal of the above tree will be 1 2 3 4 6.
Expected Time Complexity: O(Height of the BST).
Expected Auxiliary Space: O(Height of the BST).

Constraints:
1 <= Number of nodes initially in BST <= 105
1 <= k <= 109



*********Code********

class Solution {
    // time complexity O(logn) space complexity O(1)
    Node insert(Node root, int key) {
        if(root == null){
            return new Node(key);
        }
        
        Node curr = root;
        
        while(curr != null){
            if(curr.data == key) return root;
            
            if(curr.data < key){
                if(curr.right != null) curr = curr.right;
                else{
                    curr.right = new Node(key);
                    break;
                }
            }else{
                if(curr.left != null) curr = curr.left;
                else{
                    curr.left = new Node(key);
                    break;
                }
            }
        }
        
        return root;
    }
}
